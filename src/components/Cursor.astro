<section aria-hidden="true" id="cursors">
  <div id="my-cursor"></div>
  <!-- This will be filled with other peoples cursors -->
</section>

<script>
  import mqtt from "mqtt";
  import { uniqueNamesGenerator, animals } from "unique-names-generator";
  import { Buffer } from "buffer";

  type State = {
    x: number;
    y: number;
    width: number;
    height: number;
    radius: string;
  };

  type PublishState = {
    name: string;
    horizontalPercent: number;
    verticalPercent: number;
  };

  const CUSTOM_CURSOR_BASE_SIZE = 56;

  const colorNames = [
    "aliceblue",
    "antiquewhite",
    "aqua",
    "aquamarine",
    "azure",
    "beige",
    "bisque",
    "black",
    "blanchedalmond",
    "blue",
    "blueviolet",
    "brown",
    "burlywood",
    "cadetblue",
    "chartreuse",
    "chocolate",
    "coral",
    "cornflowerblue",
    "cornsilk",
    "crimson",
    "cyan",
    "darkblue",
    "darkcyan",
    "darkgoldenrod",
    "darkgray",
    "darkgreen",
    "darkgrey",
    "darkkhaki",
    "darkmagenta",
    "darkolivegreen",
    "darkorange",
    "darkorchid",
    "darkred",
    "darksalmon",
    "darkseagreen",
    "darkslateblue",
    "darkslategray",
    "darkslategrey",
    "darkturquoise",
    "darkviolet",
    "deeppink",
    "deepskyblue",
    "dimgray",
    "dimgrey",
    "dodgerblue",
    "firebrick",
    "floralwhite",
    "forestgreen",
    "fuchsia",
    "gainsboro",
    "ghostwhite",
    "gold",
    "goldenrod",
    "gray",
    "green",
    "greenyellow",
    "grey",
    "honeydew",
    "hotpink",
    "indianred",
    "indigo",
    "ivory",
    "khaki",
    "lavender",
    "lavenderblush",
    "lawngreen",
    "lemonchiffon",
    "lightblue",
    "lightcoral",
    "lightcyan",
    "lightgoldenrodyellow",
    "lightgray",
    "lightgreen",
    "lightgrey",
    "lightpink",
    "lightsalmon",
    "lightseagreen",
    "lightskyblue",
    "lightslategray",
    "lightslategrey",
    "lightsteelblue",
    "lightyellow",
    "lime",
    "limegreen",
    "linen",
    "magenta",
    "maroon",
    "mediumaquamarine",
    "mediumblue",
    "mediumorchid",
    "mediumpurple",
    "mediumseagreen",
    "mediumslateblue",
    "mediumspringgreen",
    "mediumturquoise",
    "mediumvioletred",
    "midnightblue",
    "mintcream",
    "mistyrose",
    "moccasin",
    "navajowhite",
    "navy",
    "oldlace",
    "olive",
    "olivedrab",
    "orange",
    "orangered",
    "orchid",
    "palegoldenrod",
    "palegreen",
    "paleturquoise",
    "palevioletred",
    "papayawhip",
    "peachpuff",
    "peru",
    "pink",
    "plum",
    "powderblue",
    "purple",
    "red",
    "rosybrown",
    "royalblue",
    "saddlebrown",
    "salmon",
    "sandybrown",
    "seagreen",
    "seashell",
    "sienna",
    "silver",
    "skyblue",
    "slateblue",
    "slategray",
    "slategrey",
    "snow",
    "springgreen",
    "steelblue",
    "tan",
    "teal",
    "thistle",
    "tomato",
    "turquoise",
    "violet",
    "wheat",
    "white",
    "whitesmoke",
    "yellow",
    "yellowgreen",
  ];

  let name = uniqueNamesGenerator({
    dictionaries: [colorNames, animals],
    separator: " ",
  });
  localStorage.setItem("cursor-name", name);

  const pageTopic = window.location.host + window.location.pathname;
  const endTopic = pageTopic + "/end";
  const client = mqtt.connect("wss://test.mosquitto.org:8081", {
    will: {
      topic: endTopic,
      payload: Buffer.from(name),
    },
  });

  client.subscribe(pageTopic);
  client.subscribe(endTopic);
  client.on("disconnect", () => {
    client.publish(endTopic, name);
  });
  client.on("end", () => {
    client.publish(endTopic, name);
  });

  client.on("message", (topic, message) => {
    switch (topic) {
      case endTopic:
        console.log(message, message.toString());
        const cursor = document.querySelector(
          `[data-name="${message.toString()}"]`
        ) as HTMLDivElement;
        if (cursor) cursor.remove();
        break;
      case pageTopic:
        const data = JSON.parse(message.toString()) as PublishState;

        if (data.name === name) return;

        const [color] = data.name.split(" ");

        let otherCursor = document.querySelector(
          `[data-name="${data.name}"]`
        ) as HTMLDivElement;
        if (!otherCursor) {
          otherCursor = document.createElement("div");
          otherCursor.setAttribute("data-name", data.name);
          document.querySelector("#cursors")?.prepend(otherCursor);
        }

        otherCursor.style.borderColor = `${color}`;
        const { clientWidth, scrollHeight } = document.documentElement;

        const x = (data.horizontalPercent * clientWidth) / 100;
        const y = (data.verticalPercent * scrollHeight) / 100;
        otherCursor.style.setProperty("transform", `translate(${x}px, ${y}px)`);
        otherCursor.classList.add("other-cursor");
        break;
    }
  });

  const cursor = document.querySelector("#my-cursor") as HTMLElement;
  const header = document.querySelector("header") as HTMLElement;

  let onElement: Element | null = null;
  let prevEvent: MouseEvent | null = null;

  const createState = (e: MouseEvent | Event): State => {
    const defaultState: State = {
      x: e instanceof MouseEvent ? e.clientX : prevEvent?.clientX ?? 0,
      y: e instanceof MouseEvent ? e.clientY : prevEvent?.clientY ?? 0,
      width: CUSTOM_CURSOR_BASE_SIZE,
      height: CUSTOM_CURSOR_BASE_SIZE,
      radius: "100px",
    };

    if (e instanceof MouseEvent) prevEvent = e;

    const computedState: Partial<State> = {};

    if (onElement != null) {
      cursor.classList.add("duration-100");
      const { top, left, width, height } = onElement.getBoundingClientRect();
      const radius = window.getComputedStyle(onElement).borderTopLeftRadius;

      computedState.x = left + width / 2;
      computedState.y = top + height / 2;
      computedState.width = width;
      computedState.height = height;
      computedState.radius = radius;
    } else {
      setTimeout(() => cursor.classList.remove("duration-100"), 80);
    }

    return {
      ...defaultState,
      ...computedState,
    };
  };

  const updateProperties = (elem: HTMLElement, state: State) => {
    elem.style.setProperty("--x", `${state.x}px`);
    elem.style.setProperty("--y", `${state.y}px`);
    elem.style.setProperty("--width", `${state.width}px`);
    elem.style.setProperty("--height", `${state.height}px`);
    elem.style.setProperty("--radius", state.radius);
  };

  const smoothScrollTo = (href: string, element: HTMLAnchorElement) => {
    const hash = href.replace("#", "");
    const target = document.getElementById(hash);

    if (!target) return;
    if (target?.tagName === "MAIN") return;

    const setHash = () => {
      window.location.hash = hash;
      window.removeEventListener("scrollend", setHash);
      element.blur();
    };

    element.addEventListener("click", (e) => {
      e.preventDefault();
      const { top } = target.getBoundingClientRect();
      window.addEventListener("scrollend", setHash);
      window.scrollTo({ top: top + window.scrollY, behavior: "smooth" });
    });
  };

  const addPropertiesBasedOnHref = (event: HTMLAnchorElement) => {
    const href = event.getAttribute("href");
    if (href == null) return;
    if (href.startsWith("/")) return; // internal links
    if (href.startsWith("#")) return smoothScrollTo(href, event); // anchor links

    event.setAttribute("target", "_blank");
    event.setAttribute("rel", "noopener noreferrer");
  };

  const setCursorZIndex = () => {
    const { top, height } = header.getBoundingClientRect();
    const { bottom } = cursor.getBoundingClientRect();
    const isCloseToHeader = bottom - CUSTOM_CURSOR_BASE_SIZE < top + height;

    cursor.style.zIndex = isCloseToHeader ? "40" : "30";
  };

  let debounce: NodeJS.Timeout | null = null;
  const updateState = (event: MouseEvent | Event) => {
    setCursorZIndex();
    if (debounce) clearTimeout(debounce);
    debounce =
      event instanceof MouseEvent
        ? setTimeout(() => {
            if (!client.connected) return;
            const { clientX, clientY } = event;
            const { clientWidth, scrollHeight, scrollTop } =
              document.documentElement;

            client.publish(
              pageTopic,
              JSON.stringify({
                horizontalPercent:
                  ((clientX - CUSTOM_CURSOR_BASE_SIZE / 2) / clientWidth) * 100,
                // TODO: when position if after the main content it doesn't work
                // it has some weird behavior in the footer area
                verticalPercent:
                  ((clientY + scrollTop - CUSTOM_CURSOR_BASE_SIZE / 2) /
                    scrollHeight) *
                  100,
                name,
              } satisfies PublishState)
            );
          }, 60)
        : null;
    updateProperties(cursor, createState(event));
  };

  let audioTimeout: NodeJS.Timeout | null = null;
  const playRandomHoverSound = (elem: HTMLAnchorElement) => {
    // Check if element is inside of an <article>
    if (elem.closest("article") == null) return;

    if (elem.parentElement?.tagName !== "LI") return;

    const audios = [
      "/sound/bloop-1-184019.mp3",
      "/sound/bloop-2-186531.mp3",
      "/sound/bloop-3-186532.mp3",
      "/sound/bloop-4-186533.mp3",
    ];
    const audio = new Audio(audios[Math.floor(Math.random() * audios.length)]);
    audio.volume = 0.3;
    audioTimeout && clearTimeout(audioTimeout);
    // Prevent accidental playing when scrolling and hovering over item
    audioTimeout = setTimeout(() => {
      audio.play();
      audioTimeout = null;
    }, 30);
  };

  document.addEventListener("mousemove", updateState);
  document.addEventListener("scroll", updateState);

  document.onreadystatechange = () => {
    if (document.readyState !== "complete") return;

    document.querySelectorAll("a, button").forEach((elem) => {
      addPropertiesBasedOnHref(elem as HTMLAnchorElement);
      elem.addEventListener("mouseenter", () => {
        onElement = elem;
        playRandomHoverSound(elem as HTMLAnchorElement);
      });
      elem.addEventListener("mouseleave", () => {
        onElement = null;
        audioTimeout && clearTimeout(audioTimeout);
      });
    });
  };
</script>

<style>
  body {
    @apply cursor-none;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  body:has(#wrapper) {
    @apply cursor-pointer;
  }

  body:not(body:hover) #my-cursor::after {
    @apply scale-0 opacity-0;
  }

  #my-cursor {
    @apply pointer-events-none fixed left-0 top-0 z-30 transform-gpu ease-in-out;
    transition-timing-function: cubic-bezier(0.25, 0.25, 0.42, 1);
    transition-property: width, height, transform;
    will-change: transform;
  }

  #my-cursor {
    width: var(--width);
    height: var(--height);
    transform: translate(
      calc(var(--x) - var(--width) / 2),
      calc(var(--y) - var(--height) / 2)
    );
  }

  @media (pointer: fine) {
    #my-cursor {
      @apply block;
    }
  }

  #my-cursor::after {
    @apply absolute inset-0 border-8 border-yellow-400;
    content: "";
    border-radius: var(--radius);
    opacity: var(--scale);
    transition:
      0.3s cubic-bezier(0.25, 0.25, 0.42, 1) opacity,
      0.3s cubic-bezier(0.25, 0.25, 0.42, 1) transform,
      0.1s cubic-bezier(0.25, 0.25, 0.42, 1) border-radius;
  }
</style>
