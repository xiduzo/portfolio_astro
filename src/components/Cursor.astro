---
// credits: https://codepen.io/electerious/pen/ZwKrmZ
---

<div id="custom-cursor"></div>

<script>
  type State = {
    x: number;
    y: number;
    width: number;
    height: number;
    radius: string;
  };

  const cursor = document.querySelector("#custom-cursor") as HTMLElement;
  let onElement: Element | null = null;
  let prevEvent: MouseEvent | null = null;

  const createState = (e: MouseEvent | Event): State => {
    const defaultState: State = {
      x: e instanceof MouseEvent ? e.clientX : prevEvent?.clientX ?? 0,
      y: e instanceof MouseEvent ? e.clientY : prevEvent?.clientY ?? 0,
      width: 56,
      height: 56,
      radius: "100px",
    };

    if (e instanceof MouseEvent) prevEvent = e;

    const computedState: Partial<State> = {};

    if (onElement != null) {
      cursor.classList.add("duration-100");
      const { top, left, width, height } = onElement.getBoundingClientRect();
      const radius = window.getComputedStyle(onElement).borderTopLeftRadius;

      computedState.x = left + width / 2;
      computedState.y = top + height / 2;
      computedState.width = width;
      computedState.height = height;
      computedState.radius = radius;
    } else {
      setTimeout(() => cursor.classList.remove("duration-100"), 80);
    }

    return {
      ...defaultState,
      ...computedState,
    };
  };

  const updateProperties = (elem: HTMLElement, state: State) => {
    elem.style.setProperty("--x", `${state.x}px`);
    elem.style.setProperty("--y", `${state.y}px`);
    elem.style.setProperty("--width", `${state.width}px`);
    elem.style.setProperty("--height", `${state.height}px`);
    elem.style.setProperty("--radius", state.radius);
  };

  const addProperTargetToExternalLinks = (e: HTMLAnchorElement) => {
    const link = e.getAttribute("href");
    if (link == null) return;
    // internal links
    if (link.startsWith("/")) return;
    // anchor links
    if (link.startsWith("#")) return;

    e.setAttribute("target", "_blank");
    e.setAttribute("rel", "noopener noreferrer");
  };

  const updateState = (e: MouseEvent | Event) => {
    const state = createState(e);
    updateProperties(cursor, state);
  };

  let audioTimeout: NodeJS.Timeout | null = null;
  const playRandomHoverSound = (elem: HTMLAnchorElement) => {
    // Check if element is inside of an <article>
    if (elem.closest("article") == null) return;

    if (elem.parentElement?.tagName !== "LI") return;

    const audios = [
      "/sound/bloop-1-184019.mp3",
      "/sound/bloop-2-186531.mp3",
      "/sound/bloop-3-186532.mp3",
      "/sound/bloop-4-186533.mp3",
    ];
    const audio = new Audio(audios[Math.floor(Math.random() * audios.length)]);
    audio.volume = 0.3;
    audioTimeout && clearTimeout(audioTimeout);
    // Prevent accidental playing when scrolling and hovering over item
    audioTimeout = setTimeout(() => {
      audio.play();
      audioTimeout = null;
    }, 30);
  };

  document.addEventListener("mousemove", updateState);
  document.addEventListener("scroll", updateState);

  document.onreadystatechange = () => {
    if (document.readyState !== "complete") return;

    document.querySelectorAll("a, button").forEach((elem) => {
      addProperTargetToExternalLinks(elem as HTMLAnchorElement);
      elem.addEventListener("mouseenter", () => {
        onElement = elem;
        playRandomHoverSound(elem as HTMLAnchorElement);
      });
      elem.addEventListener("mouseleave", () => {
        onElement = null;
        audioTimeout && clearTimeout(audioTimeout);
      });
    });
  };
</script>

<style>
  body {
    @apply cursor-none;
    cursor: none;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  body:not(body:hover) #custom-cursor::after {
    @apply opacity-0 scale-0;
  }

  #custom-cursor {
    @apply fixed top-0 left-0 transform-gpu ease-in-out z-50 pointer-events-none;
    display: none;
    width: var(--width);
    height: var(--height);
    transform: translate(
      calc(var(--x) - var(--width) / 2),
      calc(var(--y) - var(--height) / 2)
    );
    transition-timing-function: cubic-bezier(0.25, 0.25, 0.42, 1);
    transition-property: width, height, transform;
    will-change: transform;
  }

  @media (pointer: fine) {
    #custom-cursor {
      @apply block;
    }
  }

  #custom-cursor::after {
    @apply absolute inset-0 border-8 border-yellow-400;
    content: "";
    border-radius: var(--radius);
    opacity: var(--scale);
    transition:
      0.3s cubic-bezier(0.25, 0.25, 0.42, 1) opacity,
      0.3s cubic-bezier(0.25, 0.25, 0.42, 1) transform,
      0.1s cubic-bezier(0.25, 0.25, 0.42, 1) border-radius;
  }
</style>
