<section aria-hidden="true" id="cursors">
  <div id="my-cursor"></div>
  <!-- This will be filled with other peoples cursors -->
</section>

<script>
  import mqtt from "mqtt";
  import {
    uniqueNamesGenerator,
    animals,
    names,
    adjectives,
  } from "unique-names-generator";
  import { Buffer } from "buffer";

  type MouseState = {
    x: number;
    y: number;
    width: number;
    height: number;
    radius: string;
  };

  type PublishState = {
    name: string;
    horizontalPercent: number;
    verticalPercent: number;
  };

  const CUSTOM_CURSOR_BASE_SIZE = 56;

  // https://www.rapidtables.com/web/css/css-color.html
  const cssColorNames = [
    "lightsalmon",
    "coral",
    "moccasin",
    "limegreen",
    "paleturquoise",
    "deepskyblue",
    "violet",
    "hotpink",
    "antiquewhite",
    "burlywood",
  ];

  let name =
    localStorage.getItem("bound-name") ??
    uniqueNamesGenerator({
      dictionaries: [cssColorNames, names, ["the"], adjectives, animals],
      separator: " ",
    });
  localStorage.setItem("bound-name", name);

  const pageTopic = window.location.host + window.location.pathname;
  const endTopic = pageTopic + "/end";
  const client = mqtt.connect("wss://test.mosquitto.org:8081", {
    will: {
      topic: endTopic,
      payload: Buffer.from(name),
    },
  });

  client.subscribe(pageTopic);
  client.subscribe(endTopic);
  client.on("disconnect", () => {
    client.publish(endTopic, name);
  });
  client.on("end", () => {
    client.publish(endTopic, name);
  });

  client.on("message", (topic, message) => {
    switch (topic) {
      case endTopic:
        const [, ...readableName] = message.toString().split(" ");
        const cursor = document.querySelector(
          `[data-name="${readableName.join(" ")}"]`
        ) as HTMLDivElement;
        if (cursor) cursor.remove();
        break;
      case pageTopic:
        const data = JSON.parse(message.toString()) as PublishState;

        if (data.name === name) return;

        const [color, ...rest] = data.name.split(" ");
        const otherName = rest.join(" ");

        let otherCursor = document.querySelector<HTMLElement>(
          `[data-name="${otherName}"]`
        );
        if (!otherCursor) {
          otherCursor = document.createElement("div");
          otherCursor.setAttribute("data-name", otherName);
          otherCursor.style.setProperty("--name", `"${otherName}"`);
          otherCursor.style.setProperty("--color", `${color}`);
          document.querySelector("#cursors")?.prepend(otherCursor);
        }

        const { clientWidth, scrollHeight } = document.documentElement;

        const x = (data.horizontalPercent * clientWidth) / 100;
        const y = (data.verticalPercent * scrollHeight) / 100;
        otherCursor.style.setProperty("transform", `translate(${x}px, ${y}px)`);
        otherCursor.classList.add("other-cursor");
        break;
    }
  });

  let cursor = document.querySelector("#my-cursor") as HTMLElement;
  const header = document.querySelector("header") as HTMLElement;

  let onElement: Element | null = null;
  let lastMouseEvent: MouseEvent | null = null;

  const createState = (event: MouseEvent | Event): MouseState => {
    const state: MouseState = {
      x:
        event instanceof MouseEvent
          ? event.clientX
          : (lastMouseEvent?.clientX ?? 0),
      y:
        event instanceof MouseEvent
          ? event.clientY
          : (lastMouseEvent?.clientY ?? 0),
      width: CUSTOM_CURSOR_BASE_SIZE,
      height: CUSTOM_CURSOR_BASE_SIZE,
      radius: "100px",
    };

    if (event instanceof MouseEvent) lastMouseEvent = event;

    if (onElement != null && document.body.contains(onElement)) {
      cursor.classList.add("duration-100");
      const { top, left, width, height } = onElement.getBoundingClientRect();
      const radius =
        window.getComputedStyle(onElement).borderTopLeftRadius || "0px";

      state.x = left + width / 2;
      state.y = top + height / 2;
      state.width = width;
      state.height = height;
      state.radius = radius;
    } else {
      setTimeout(() => cursor.classList.remove("duration-100"), 80);
    }

    return state;
  };

  const updateProperties = (element: HTMLElement, state: MouseState) => {
    element.style.setProperty("--x", `${state.x}px`);
    element.style.setProperty("--y", `${state.y}px`);
    element.style.setProperty("--width", `${state.width}px`);
    element.style.setProperty("--height", `${state.height}px`);
    element.style.setProperty("--radius", state.radius);
  };

  const smoothScrollTo = (href: string, element: HTMLAnchorElement) => {
    const hash = href.replace("#", "");
    const target = document.getElementById(hash);

    if (!target) return;
    if (target?.tagName === "MAIN") return;

    const setHash = () => {
      window.location.hash = hash;
      window.removeEventListener("scrollend", setHash);
      element.blur();
    };

    element.addEventListener("click", (e) => {
      e.preventDefault();
      const { top } = target.getBoundingClientRect();
      window.addEventListener("scrollend", setHash);
      window.scrollTo({ top: top + window.scrollY, behavior: "smooth" });
    });
  };

  const addPropertiesBasedOnHref = (event: HTMLAnchorElement) => {
    const href = event.getAttribute("href");
    if (href == null) return;
    if (href.startsWith("/")) return; // internal links
    if (href.startsWith("#")) return smoothScrollTo(href, event); // anchor links

    event.setAttribute("target", "_blank");
    event.setAttribute("rel", "noopener noreferrer");
  };

  const setCursorZIndex = () => {
    const { top, height } = header.getBoundingClientRect();
    const { bottom } = cursor.getBoundingClientRect();
    const isCloseToHeader = bottom - CUSTOM_CURSOR_BASE_SIZE < top + height;

    cursor.style.zIndex = isCloseToHeader ? "40" : "30";
  };

  let debounce: NodeJS.Timeout | null = null;
  const updateState = (event: MouseEvent | Event) => {
    setCursorZIndex();
    if (debounce) clearTimeout(debounce);
    debounce =
      event instanceof MouseEvent
        ? setTimeout(() => {
            if (!client.connected) return;
            const { clientX, clientY } = event;
            const { clientWidth, scrollHeight, scrollTop } =
              document.documentElement;

            client.publish(
              pageTopic,
              JSON.stringify({
                horizontalPercent:
                  ((clientX - CUSTOM_CURSOR_BASE_SIZE / 4) / clientWidth) * 100,
                // TODO: when position if after the main content it doesn't work
                // it has some weird behavior in the footer area
                verticalPercent:
                  ((clientY + scrollTop - CUSTOM_CURSOR_BASE_SIZE / 4) /
                    scrollHeight) *
                  100,
                name,
              } satisfies PublishState)
            );
          }, 60)
        : null;
    updateProperties(cursor, createState(event));
  };

  let audioTimeout: NodeJS.Timeout | null = null;
  const playRandomHoverSound = (elem: HTMLAnchorElement) => {
    // Check if element is inside of an <article>
    if (elem.closest("article") == null) return;

    if (elem.parentElement?.tagName !== "LI") return;

    const audios = [
      "/sound/bloop-1-184019.mp3",
      "/sound/bloop-2-186531.mp3",
      "/sound/bloop-3-186532.mp3",
      "/sound/bloop-4-186533.mp3",
    ];
    const audio = new Audio(audios[Math.floor(Math.random() * audios.length)]);
    audio.volume = 0.3;
    audioTimeout && clearTimeout(audioTimeout);
    // Prevent accidental playing when scrolling and hovering over item
    audioTimeout = setTimeout(() => {
      audio.play();
      audioTimeout = null;
    }, 30);
  };

  document.addEventListener("mousemove", updateState);
  document.addEventListener("scroll", updateState);

  document.addEventListener("astro:page-load", () => {
    cursor = document.querySelector("#my-cursor") as HTMLElement;
    if (document.readyState !== "complete") return;

    document.querySelectorAll("a, button").forEach((elem) => {
      addPropertiesBasedOnHref(elem as HTMLAnchorElement);
      elem.addEventListener("mouseenter", () => {
        onElement = elem;
        playRandomHoverSound(elem as HTMLAnchorElement);
      });
      elem.addEventListener("mouseleave", () => {
        onElement = null;
        audioTimeout && clearTimeout(audioTimeout);
      });
    });
  });
</script>

<style>
  body {
    @apply md:cursor-none;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  body:has(#wrapper) {
    @apply cursor-pointer;
  }

  body:has(#wrapper) #my-cursor {
    @apply !z-50;
  }

  body:not(body:hover) #my-cursor::after {
    @apply scale-0 opacity-0;
  }

  #my-cursor {
    @apply pointer-events-none fixed left-0 top-0 z-30 transform-gpu ease-in-out;
    transition-timing-function: cubic-bezier(0.25, 0.25, 0.42, 1);
    transition-property: width, height, transform;
    will-change: transform;
    width: var(--width);
    height: var(--height);
    transform: translate(
      calc(var(--x) - var(--width) / 2),
      calc(var(--y) - var(--height) / 2)
    );
  }

  @media (pointer: fine) {
    #my-cursor {
      @apply block;
    }
  }

  #my-cursor::after {
    @apply absolute inset-0 hidden border-8 border-yellow-400 md:block;
    content: "";
    border-radius: var(--radius);
    opacity: var(--scale);
    transition:
      0.3s cubic-bezier(0.25, 0.25, 0.42, 1) opacity,
      0.3s cubic-bezier(0.25, 0.25, 0.42, 1) transform,
      0.1s cubic-bezier(0.25, 0.25, 0.42, 1) border-radius;
  }
</style>
